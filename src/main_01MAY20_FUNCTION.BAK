#include <Arduino.h>
#include <Print.h>
#include <dht11.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SoftwareSerial.h>


//MCU690614 - Infrared thermal
#define RXPIN 2 // pin used to receive from MCU90614
#define TXPIN 3 // // pin used to send to MCU90614
SoftwareSerial serial_thermal(RXPIN, TXPIN);
unsigned char Re_buf[11],counter=0;
unsigned char sign=0;
float TO=0,TA=0;

struct IR_temp{
  float object_temp = 0;
  float envi_temp = 0;
};

IR_temp read_ir_temperature(void){
  struct IR_temp temp;

  temp.object_temp = 50;
  temp.envi_temp = 60;

  return temp;

}
void setup() {

  IR_temp current;

  Serial.begin(9600);
  current = read_ir_temperature();
  Serial.print("Object: "); Serial.println(current.object_temp);
  Serial.print("Environment: "); Serial.println(current.envi_temp);
  delay(1000);


  //Serial setup for thermal
  pinMode(RXPIN, INPUT);
  pinMode(TXPIN, OUTPUT);

  Serial.begin(9600);
  Serial.print("Data frame is being sent");
  delay(100);

  serial_thermal.begin(9600);
  serial_thermal.write(0XA5);
  serial_thermal.write(0X15);
  serial_thermal.write(0XBA);
  Serial.println("Data frame sent");
  delay(1000);

}

float get_ir_temp(void){
  unsigned char i=0,sum=0;

  //while (serial_thermal.available()>0) {
  if   (serial_thermal.available()>0) {
    Re_buf[counter]=(unsigned char)serial_thermal.read();
    sign=0;
    for(i=0;i<8;i++){
      sum+=Re_buf[i];
        //Serial.print("sum:"); Serial.println(sum);
        //Serial.print("Re_buf[i]"); Serial.println(Re_buf[i]);
    }
    if(sum==Re_buf[i] ){        //Check frame header, frame tail
      TO=(float)(Re_buf[4]<<8|Re_buf[5])/100;
      Serial.print("TO:");
      Serial.println(TO);
      TA=(float)(Re_buf[6]<<8|Re_buf[7])/100;
      Serial.print("TA:");
      Serial.println(TA);
      delay(10000);
    }

    if(counter==0&&Re_buf[0]!=0x5A){
      Serial.print("Return TA: "); Serial.println(TA);
      Serial.println("VVVVVVVVVVVVVVVVVVVVVVVVVVVV");
      return TA;      // Check frame header
    }
    counter++;
    if(counter==9){                //Received data
      counter=0;                 //Reassignment, prepare for the next frame of data reception
      sign=1;
    }
  }

  Serial.print("Return TO: "); Serial.println(TO);
  Serial.println("=============================");
  return TO;
}

// the loop function runs over and over again forever
void loop() {

  float f;
  f = get_ir_temp();

  if (f > 20){
    Serial.println("HOT");
  }
  else{
    Serial.println("COLD");
  }



/*
  unsigned char i=0,sum=0;

  Serial.print("serial_thermal.available: ");
  Serial.println(serial_thermal.available());
  delay(10);

  Serial.print("sign: "); Serial.println(sign);
  delay(10);

  if (sign > 0){
    delay(10000);}

  while (serial_thermal.available()>0) {
    Re_buf[counter]=(unsigned char)serial_thermal.read();
    sign=0;
    for(i=0;i<8;i++){
      sum+=Re_buf[i];
        //Serial.print("sum:"); Serial.println(sum);
        //Serial.print("Re_buf[i]"); Serial.println(Re_buf[i]);
    }
    if(sum==Re_buf[i] ){        //Check frame header, frame tail
      TO=(float)(Re_buf[4]<<8|Re_buf[5])/100;
      Serial.print("TO:");
      Serial.println(TO);
      TA=(float)(Re_buf[6]<<8|Re_buf[7])/100;
      Serial.print("TA:");
      Serial.println(TA);
      delay(5000);
    }

    if(counter==0&&Re_buf[0]!=0x5A) return;      // Check frame header
      counter++;
    if(counter==9){                //Received data
      counter=0;                 //Reassignment, prepare for the next frame of data reception
      sign=1;
    }
  }
*/
}
